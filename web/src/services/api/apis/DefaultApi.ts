/* tslint:disable */
/* eslint-disable */
/**
 * Api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022-12-20T01:31:50Z
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetIncomeRequest,
  GetIncomeResponse,
  GetPhotosProducerRequest,
  GetPhotosProducerResponse,
  GetPhotosRequest,
  GetPhotosResponse,
  PutPhotoRequest,
  PutPhotoResponse,
} from '../models';
import {
    GetIncomeRequestFromJSON,
    GetIncomeRequestToJSON,
    GetIncomeResponseFromJSON,
    GetIncomeResponseToJSON,
    GetPhotosProducerRequestFromJSON,
    GetPhotosProducerRequestToJSON,
    GetPhotosProducerResponseFromJSON,
    GetPhotosProducerResponseToJSON,
    GetPhotosRequestFromJSON,
    GetPhotosRequestToJSON,
    GetPhotosResponseFromJSON,
    GetPhotosResponseToJSON,
    PutPhotoRequestFromJSON,
    PutPhotoRequestToJSON,
    PutPhotoResponseFromJSON,
    PutPhotoResponseToJSON,
} from '../models';

export interface DownloadProjectIdGetRequest {
    projectId: string;
}

export interface DownloadProjectIdOptionsRequest {
    projectId: string;
}

export interface IncomePutRequest {
    getIncomeRequest: GetIncomeRequest;
}

export interface PhotosGetRequest {
    getPhotosRequest: GetPhotosRequest;
}

export interface PhotosProducerPutRequest {
    getPhotosProducerRequest: GetPhotosProducerRequest;
}

export interface PhotosUploadPutRequest {
    putPhotoRequest: PutPhotoRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async buyGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // DevelopmentLabelHubBackendApiAuthorizerF478BBAE authentication
        }

        const response = await this.request({
            path: `/buy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async buyGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.buyGetRaw(initOverrides);
    }

    /**
     */
    async buyOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/buy`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async buyOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.buyOptionsRaw(initOverrides);
    }

    /**
     */
    async downloadProjectIdGetRaw(requestParameters: DownloadProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling downloadProjectIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/download/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async downloadProjectIdGet(requestParameters: DownloadProjectIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadProjectIdGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async downloadProjectIdOptionsRaw(requestParameters: DownloadProjectIdOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling downloadProjectIdOptions.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/download/{project_id}`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async downloadProjectIdOptions(requestParameters: DownloadProjectIdOptionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadProjectIdOptionsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async incomeOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/income`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async incomeOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.incomeOptionsRaw(initOverrides);
    }

    /**
     */
    async incomePutRaw(requestParameters: IncomePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetIncomeResponse>> {
        if (requestParameters.getIncomeRequest === null || requestParameters.getIncomeRequest === undefined) {
            throw new runtime.RequiredError('getIncomeRequest','Required parameter requestParameters.getIncomeRequest was null or undefined when calling incomePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // DevelopmentLabelHubBackendApiAuthorizerF478BBAE authentication
        }

        const response = await this.request({
            path: `/income`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GetIncomeRequestToJSON(requestParameters.getIncomeRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetIncomeResponseFromJSON(jsonValue));
    }

    /**
     */
    async incomePut(requestParameters: IncomePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetIncomeResponse> {
        const response = await this.incomePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async photosGetRaw(requestParameters: PhotosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPhotosResponse>> {
        if (requestParameters.getPhotosRequest === null || requestParameters.getPhotosRequest === undefined) {
            throw new runtime.RequiredError('getPhotosRequest','Required parameter requestParameters.getPhotosRequest was null or undefined when calling photosGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // DevelopmentLabelHubBackendApiAuthorizerF478BBAE authentication
        }

        const response = await this.request({
            path: `/photos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
            body: GetPhotosRequestToJSON(requestParameters.getPhotosRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPhotosResponseFromJSON(jsonValue));
    }

    /**
     */
    async photosGet(requestParameters: PhotosGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPhotosResponse> {
        const response = await this.photosGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async photosOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/photos`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async photosOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.photosOptionsRaw(initOverrides);
    }

    /**
     */
    async photosProducerOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/photos/producer`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async photosProducerOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.photosProducerOptionsRaw(initOverrides);
    }

    /**
     */
    async photosProducerPutRaw(requestParameters: PhotosProducerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetPhotosProducerResponse>> {
        if (requestParameters.getPhotosProducerRequest === null || requestParameters.getPhotosProducerRequest === undefined) {
            throw new runtime.RequiredError('getPhotosProducerRequest','Required parameter requestParameters.getPhotosProducerRequest was null or undefined when calling photosProducerPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // DevelopmentLabelHubBackendApiAuthorizerF478BBAE authentication
        }

        const response = await this.request({
            path: `/photos/producer`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GetPhotosProducerRequestToJSON(requestParameters.getPhotosProducerRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetPhotosProducerResponseFromJSON(jsonValue));
    }

    /**
     */
    async photosProducerPut(requestParameters: PhotosProducerPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetPhotosProducerResponse> {
        const response = await this.photosProducerPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async photosUploadOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/photos/upload`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async photosUploadOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.photosUploadOptionsRaw(initOverrides);
    }

    /**
     */
    async photosUploadPutRaw(requestParameters: PhotosUploadPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PutPhotoResponse>> {
        if (requestParameters.putPhotoRequest === null || requestParameters.putPhotoRequest === undefined) {
            throw new runtime.RequiredError('putPhotoRequest','Required parameter requestParameters.putPhotoRequest was null or undefined when calling photosUploadPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // DevelopmentLabelHubBackendApiAuthorizerF478BBAE authentication
        }

        const response = await this.request({
            path: `/photos/upload`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutPhotoRequestToJSON(requestParameters.putPhotoRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PutPhotoResponseFromJSON(jsonValue));
    }

    /**
     */
    async photosUploadPut(requestParameters: PhotosUploadPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PutPhotoResponse> {
        const response = await this.photosUploadPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async projectsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // DevelopmentLabelHubBackendApiAuthorizerF478BBAE authentication
        }

        const response = await this.request({
            path: `/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectsGetRaw(initOverrides);
    }

    /**
     */
    async projectsOptionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/projects`,
            method: 'OPTIONS',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsOptions(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectsOptionsRaw(initOverrides);
    }

    /**
     */
    async projectsPutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // DevelopmentLabelHubBackendApiAuthorizerF478BBAE authentication
        }

        const response = await this.request({
            path: `/projects`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async projectsPut(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.projectsPutRaw(initOverrides);
    }

}
